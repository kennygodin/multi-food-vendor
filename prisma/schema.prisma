// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  email String @unique
  image String?
  password String
  phoneNumber Float?
  streetAddress String?
  country String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
}

model Vendor {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  businessName String
  email String @unique
  password String
  image String?
  contactAddress String?
  phoneNumber String?
  country String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account Account[]
  sessions Session[]
  categories Category[]
  menuItems MenuItem[]
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String?
  vendorId String @db.ObjectId
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  mmenuItems MenuItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  image String?
  price Int
  vendorId String @db.ObjectId
  categoryId String @db.ObjectId
  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Account {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    vendorId String @db.ObjectId
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.String
    access_token String @db.String
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.String
    session_state String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
      id String @id @default(auto()) @map("_id") @db.ObjectId
      sessionToken String @unique
      userId String @db.ObjectId
      vendorId String @db.ObjectId
      expires DateTime

      user User @relation(fields: [userId], references: [id], onDelete: Cascade)
      vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)
}

